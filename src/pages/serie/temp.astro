---
import Layout from '../../layouts/Layout.astro';
import db from '../../lib/db';

export const prerender = false;

let likes = 0;
let dislikes = 0;
let userReaction = null;

const { id } = Astro.params;

// En tu archivo Astro
const usuarioId = Number(Astro.url.searchParams.get('usuario'));

const [[serie]] = await db.query(`SELECT * FROM series WHERE id = ?`, [id]);

if (!serie) {
  throw new Error('Serie no encontrada');
}

const [temporadas] = await db.query(
  `SELECT * FROM temporadas WHERE serie_id = ? ORDER BY numero_temporada`,
  [serie.id]
);

let episodios = [];
if (temporadas.length > 0) {
  const [eps] = await db.query(
    `SELECT * FROM episodios WHERE temporada_id = ? ORDER BY numero_episodio`,
    [temporadas[0].id]
  );
  episodios = eps;
}

const [[lrow]] = await db.query(
  `SELECT COUNT(*) AS likes FROM likes_dislikes WHERE serie_id = ? AND tipo='like'`,
  [id]
);
const [[drow]] = await db.query(
  `SELECT COUNT(*) AS dislikes FROM likes_dislikes WHERE serie_id = ? AND tipo='dislike'`,
  [id]
);
likes = lrow.likes;
dislikes = drow.dislikes;

const [[reactionRow]] = await db.query(
  `SELECT tipo FROM likes_dislikes WHERE usuario_id = ? AND serie_id = ? LIMIT 1`,
  [usuarioId, id]
);
userReaction = reactionRow ? reactionRow.tipo : null;
---
<Layout class="bg-black text-white">
  <section class="relative h-[750px] overflow-hidden">
    <img
      src={serie.banner}
      alt={serie.titulo}
      class="absolute inset-0 w-full h-full object-cover"
    />
    <div class="absolute inset-0 bg-gradient-to-t from-black/80 to-transparent" />
    <div class="absolute inset-0 flex items-center px-8">
      <div class="max-w-2xl">
        <h1 class="text-5xl font-bold mb-2">{serie.titulo}</h1>
        <div class="flex items-center space-x-3 mb-4 text-sm text-white/80">
          <span class="bg-pink-500 px-2 py-1 rounded text-white">
            {serie.clasificacion_edad}+
          </span>
          <p class="bg-pink-500 px-2 py-1 rounded text-white">
            {serie.idioma}
          </p>
          <p class="text-sm text-white mb-4">
            {serie.genero}
          </p>
        </div>
        <div>
          <p class="text-white text-lg mb-6">
            {serie.descripcion}
          </p>
        </div>

        <div class="flex flex-col md:flex-row md:items-center gap-4 md:gap-8">
          <div class="flex gap-4">
            <button class="bg-pink-500 text-white px-4 py-2 rounded">Añadir a Favoritos</button>
          </div>

          <div id="reactions" class="flex items-center space-x-4">
            <button id="btn-like" class={`flex items-center space-x-1 hover:text-green-500 ${userReaction === 'like' ? 'text-green-500' : 'text-white'}`}>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="w-6 h-6" fill="currentColor">
                  <path d="M313.4 32.9c26 5.2 42.9 30.5 37.7 56.5l-2.3 11.4c-5.3 26.7-15.1 52.1-28.8 75.2l144 0c26.5 0 48 21.5 48 48c0 18.5-10.5 34.6-25.9 42.6C497 275.4 504 288.9 504 304c0 23.4-16.8 42.9-38.9 47.1c4.4 7.3 6.9 15.8 6.9 24.9c0 21.3-13.9 39.4-33.1 45.6c.7 3.3 1.1 6.8 1.1 10.4c0 26.5-21.5 48-48 48l-97.5 0c-19 0-37.5-5.6-53.3-16.1l-38.5-25.7C176 420.4 160 390.4 160 358.3l0-38.3 0-48 0-24.9c0-29.2 13.3-56.7 36-75l7.4-5.9c26.5-21.2 44.6-51 51.2-84.2l2.3-11.4c5.2-26 30.5-42.9 56.5-37.7zM32 192l64 0c17.7 0 32 14.3 32 32l0 224c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32L0 224c0-17.7 14.3-32 32-32z"/>
                </svg>
              <span id="count-like">{likes}</span>
            </button>
            <button id="btn-dislike" class={`flex items-center space-x-1 hover:text-red-500 ${userReaction === 'dislike' ? 'text-red-500' : 'text-white'}`}>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="w-6 h-6" fill="currentColor">
                  <path d="M313.4 479.1c26-5.2 42.9-30.5 37.7-56.5l-2.3-11.4c-5.3-26.7-15.1-52.1-28.8-75.2l144 0c26.5 0 48-21.5 48-48c0-18.5-10.5-34.6-25.9-42.6C497 236.6 504 223.1 504 208c0-23.4-16.8-42.9-38.9-47.1c4.4-7.3 6.9-15.8 6.9-24.9c0-21.3-13.9-39.4-33.1-45.6c.7-3.3 1.1-6.8 1.1-10.4c0-26.5-21.5-48-48-48l-97.5 0c-19 0-37.5 5.6-53.3 16.1L202.7 73.8C176 91.6 160 121.6 160 153.7l0 38.3 0 48 0 24.9c0 29.2 13.3 56.7 36 75l7.4 5.9c26.5 21.2 44.6 51 51.2 84.2l2.3 11.4c5.2 26 30.5 42.9 56.5 37.7zM32 384l64 0c17.7 0 32-14.3 32-32l0-224c0-17.7-14.3-32-32-32L32 96C14.3 96 0 110.3 0 128L0 352c0 17.7 14.3 32 32 32z"/>
                </svg>
              <span id="count-dislike">{dislikes}</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  </section>

  <section class="px-8 py-10 overflow-hidden">
    <h2 class="text-2xl text-white font-bold mb-4">Temporadas</h2>
    <select class="w-70 md:w-4/10 p-2 rounded bg-gray-800 text-white" id="temporadaSelect">
      {temporadas.map(t => (
        <option value={t.id}>{t.nombre_temporada}</option>
      ))}
    </select>
  </section>

  <div class="px-8 py-4 overflow-hidden" id="episodiosContainer">
    <h2 class="text-2xl text-white font-bold mb-4">Episodios</h2>
    {episodios.length > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {episodios.map(ep => (
          <div class="hover:scale-105 transition-transform duration-500 bg-gray-800 rounded-lg overflow-hidden">
            <img src={ep.imagen_preview} alt={ep.titulo} class="w-full h-40 object-cover" />
            <div class="p-4">
              <h3 class="text-white font-semibold">{ep.titulo}</h3>
              <p class="text-gray-400 text-sm">Duración: {ep.duracion} min • {ep.idioma}</p>
            </div>
          </div>
        ))}
      </div>
    ) : (
      <p class="text-gray-400">No hay episodios disponibles.</p>
    )}
  </div>

  <script>
    const usuarioId = {usuarioId};
    const serieId = {id};

    const btnLike = document.getElementById('btn-like');
    const btnDislike = document.getElementById('btn-dislike');
    const countLike = document.getElementById('count-like');
    const countDislike = document.getElementById('count-dislike');

    btnLike.addEventListener('click', () => sendReaction('like'));
    btnDislike.addEventListener('click', () => sendReaction('dislike'));

async function sendReaction(tipo) {
  const res = await fetch(`/api/reaction/${serieId}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ usuarioId, tipo })
  });
  const data = await res.json();
  countLike.textContent = data.likes;
  countDislike.textContent = data.dislikes;

  btnLike.classList.toggle('text-green-500', tipo === 'like');
  btnLike.classList.toggle('text-white', tipo !== 'like');
  btnDislike.classList.toggle('text-red-500', tipo === 'dislike');
  btnDislike.classList.toggle('text-white', tipo !== 'dislike');
}

    document.getElementById('temporadaSelect').addEventListener('change', async (e) => {
      const temporadaId = e.target.value;
      const res = await fetch(`/api/episodios/${temporadaId}`);
      const episodios = await res.json();

      const container = document.getElementById('episodiosContainer');
      container.innerHTML = `
        <h2 class="text-2xl text-white font-bold mb-4">Episodios</h2>
        ${
          episodios.length > 0
            ? `
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            ${episodios.map(ep => `
              <div class="hover:scale-105 transition-transform duration-500 bg-gray-800 rounded-lg overflow-hidden">
                <img src="${ep.imagen_preview}" alt="${ep.titulo}" class="w-full h-40 object-cover" />
                <div class="p-4">
                  <h3 class="text-white font-semibold">${ep.titulo}</h3>
                  <p class="text-gray-400 text-sm">Duración: ${ep.duracion} min • ${ep.idioma}</p>
                </div>
              </div>
            `).join('')}
          </div>
        ` : '<p class="text-gray-400">No hay episodios disponibles.</p>'
        }
      `;
    });
  </script>
</Layout>