---
import Layout from '../../layouts/Layout.astro';
import db from '../../lib/db';

export const prerender = false;
const id = Astro.params.id;

let series = null;
let seasons = [];
let episodesBySeason = {};
let rating = { avg: 0, count: 0 };
let lastProgress = null;
let likes = 0, dislikes = 0;

try {
  // 1) Serie + gÃ©neros
  const [[s]] = await db.query(`
    SELECT
      s.*,
      GROUP_CONCAT(DISTINCT s.genero SEPARATOR ', ') AS genero_list
    FROM series s
    WHERE s.id = ?
    GROUP BY s.id
  `, [id]);
  series = s || null;

  if (series) {
    // 2) Rating
    const [[r]] = await db.query(`
      SELECT
        IFNULL(AVG(calificacion),0) AS avg,
        COUNT(*) AS count
      FROM calificaciones
      WHERE serie_id = ?
    `, [id]);
    rating = r;

    // 3) Historial (usuario 1 â†’ reemplaza con cookie real en cliente)
    const [hist] = await db.query(`
      SELECT h.*, e.numero_episodio, t.numero_temporada
      FROM historial h
      JOIN episodios e ON e.id = h.episodio_id
      JOIN temporadas t ON t.id = e.temporada_id
      WHERE h.usuario_id = ? AND t.serie_id = ?
      ORDER BY h.fecha_actualizacion DESC
      LIMIT 1
    `, [1, id]);
    lastProgress = hist[0] || null;

    // 4) Temporadas + Episodios
    [seasons] = await db.query(
      `SELECT * FROM temporadas WHERE serie_id = ? ORDER BY numero_temporada`,
      [id]
    );
    for (const t of seasons) {
      const [eps] = await db.query(
        `SELECT * FROM episodios WHERE temporada_id = ? ORDER BY numero_episodio`,
        [t.id]
      );
      episodesBySeason[t.id] = eps;
    }

    // 5) Totales likes/dislikes
    const [[lrow]] = await db.query(
      `SELECT COUNT(*) AS likes FROM likes_dislikes WHERE serie_id = ? AND tipo='like'`,
      [id]
    );
    const [[drow]] = await db.query(
      `SELECT COUNT(*) AS dislikes FROM likes_dislikes WHERE serie_id = ? AND tipo='dislike'`,
      [id]
    );
    likes = lrow.likes;
    dislikes = drow.dislikes;
  }
} catch (e) {
  console.error('Error cargando detalle de serie:', e);
}

// temporada activa
let currentSeason = seasons[0]?.id ?? null;
---

<Layout>
  {series === null ? (
    <div class="p-8 text-center text-white">
      <p>ðŸš« Serie no encontrada.</p>
    </div>
  ) : (
    <>
      <!-- Banner + metadatos -->
      <section class="relative h-[450px] overflow-hidden">
        <img src={series.banner} alt={series.titulo}
             class="absolute inset-0 w-full h-full object-cover" />
        <div class="absolute inset-0 bg-gradient-to-t from-black/80 to-transparent" />
        <div class="absolute inset-0 flex items-center px-8">
          <div class="max-w-2xl text-white">
            <h1 class="text-5xl font-bold mb-2">{series.titulo}</h1>
            <div class="flex items-center space-x-3 mb-4 text-sm">
              <span class="bg-gray-800 px-2 py-1 rounded">{series.clasificacion_edad}+</span>
              <span>â€¢</span>
              <span>{series.idioma}</span>
              <span>â€¢</span>
              <span class="underline">{series.genero_list}</span>
            </div>
            <div class="flex items-center space-x-2 mb-6">
              {Array.from({ length: 5 }).map((_, i) => (
                <svg key={i}
                  class={`w-6 h-6 ${i < Math.round(rating.avg) ? 'fill-yellow-400' : 'fill-gray-600'}`}
                  viewBox="0 0 24 24"
                >
                  <path d="M12 .587l3.668 7.431L24 9.748l-6 5.848 â€¦"/>
                </svg>
              ))}
              <span class="ml-2">{rating.avg.toFixed(1)} ({rating.count})</span>
            </div>

            <!-- CONTINUAR + REACCIONES -->
            <div class="flex items-center space-x-6">
              <a
                href={ lastProgress
                  ? `/serie/${id}/temporada/${lastProgress.numero_temporada}/episodio/${lastProgress.numero_episodio}`
                  : `/serie/${id}/temporada/${seasons[0]?.numero_temporada}/episodio/1`
                }
                class="bg-orange-600 hover:bg-orange-700 px-5 py-3 rounded font-semibold text-lg inline-flex items-center"
              >
                â–¶ CONTINUAR
              </a>

              <div id="reactions" class="flex items-center space-x-4 text-white">
                <button id="btn-like" class="flex items-center space-x-1 hover:text-purple-400">
                  <svg id="icon-like" class="w-6 h-6" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 21.35l-1.45-1.32C5.4 â€¦" />
                  </svg>
                  <span id="count-like">{likes}</span>
                </button>
                <button id="btn-dislike" class="flex items-center space-x-1 hover:text-purple-400">
                  <svg id="icon-dislike" class="w-6 h-6" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 2.65l1.45 1.32C18.6 â€¦" />
                  </svg>
                  <span id="count-dislike">{dislikes}</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- Selector de Temporadas -->
      <section class="mt-8 px-8">
        <div class="flex space-x-4 bg-gray-900 rounded overflow-x-auto">
          {seasons.map(s => (
            <button
              key={s.id}
              class={`px-4 py-2 whitespace-nowrap ${
                s.id === currentSeason ? 'bg-orange-600 text-white' : 'text-gray-300'
              }`}
              data-season-id={s.id}
            >
              S{s.numero_temporada}: {s.nombre_temporada}
            </button>
          ))}
        </div>
      </section>

      <!-- Grid de Episodios -->
      <section class="mt-6 px-8 pb-12">
        <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-6" id="episodes-grid">
          {seasons.flatMap(s =>
            episodesBySeason[s.id].map(ep => (
              <div
                key={ep.id}
                class="episode-card relative group overflow-hidden rounded-lg"
                data-season-id={s.id}
                style={s.id === currentSeason ? '' : 'display:none'}
              >
                <img
                  src={ep.imagen_preview}
                  alt={`S${s.numero_temporada}E${ep.numero_episodio}`}
                  class="w-full h-44 object-cover"
                />
                <div class="absolute inset-0 bg-black/50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition">
                  <svg class="w-12 h-12 text-white" viewBox="0 0 24 24">
                    <path fill="currentColor" d="M8 5v14l11-7z"/>
                  </svg>
                </div>
                <div class="mt-2">
                  <h4 class="text-white font-semibold">
                    S{s.numero_temporada}E{ep.numero_episodio} â€“ {ep.titulo}
                  </h4>
                  <p class="text-gray-400 text-sm">{ep.idioma}</p>
                </div>
              </div>
            ))
          )}
        </div>
      </section>
    </>
  )}
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const serieId     = '${id}';
    const likeBtn     = document.getElementById('btn-like');
    const dislikeBtn  = document.getElementById('btn-dislike');
    const likeIcon    = document.getElementById('icon-like');
    const dislikeIcon = document.getElementById('icon-dislike');
    const likeCount   = document.getElementById('count-like');
    const dislikeCount= document.getElementById('count-dislike');

    // refresca totales y mi reacciÃ³n
    async function fetchReactions() {
      const res = await fetch(`/api/serie/${serieId}/reaction`);
      if (!res.ok) return;
      const { likes, dislikes, reaction } = await res.json();
      likeCount.textContent     = likes;
      dislikeCount.textContent  = dislikes;
      likeIcon.classList.toggle('text-purple-500', reaction==='like');
      dislikeIcon.classList.toggle('text-purple-500', reaction==='dislike');
      likeIcon.classList.toggle('text-white',     reaction!=='like');
      dislikeIcon.classList.toggle('text-white',  reaction!=='dislike');
    }

    // envÃ­a toggle
    async function sendReaction(type) {
      const res = await fetch(`/api/serie/${serieId}/reaction`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ type })
      });
      if (res.status === 401) {
        return alert('Debes iniciar sesiÃ³n para reaccionar');
      }
      if (!res.ok) {
        return alert('Error al enviar reacciÃ³n');
      }
      await fetchReactions();
    }

    likeBtn.addEventListener('click',    () => sendReaction('like'));
    dislikeBtn.addEventListener('click', () => sendReaction('dislike'));

    fetchReactions();

    // selector de temporadas
    const buttons = document.querySelectorAll('[data-season-id]');
    const cards   = document.querySelectorAll('.episode-card');
    buttons.forEach(btn => {
      btn.addEventListener('click', () => {
        const sid = btn.dataset.seasonId;
        buttons.forEach(b => b.classList.remove('bg-orange-600','text-white'));
        btn.classList.add('bg-orange-600','text-white');
        cards.forEach(c => {
          c.style.display = c.dataset.seasonId === sid ? '' : 'none';
        });
      });
    });
  });
</script>
